一、语法：
    1.用字母 数字 特殊符号 组成的命令
    2.字母的大小写 敏感
    3.用行与‘ ;’分割
    4.注释
        单行注释//
        多行注释/* */
    5.输出
        alert //弹窗
        console.loh //控制台

二、值
    类型：
        数字
            整数：1 2 0
            小数 浮点数：1.222
        字符串： "adf" '1'
        布尔值： true false

    直接量
    变量  ->容器 -> 存值 ->大小 ->直接量
    变量 = 地址 <-对象

    声明：
    var x ; 声明 = 创建一个变量

    变量名
    1.变量名 必须是字母和数字 $ _组成
    2.开始是字母
    3.大小写敏感

三、表示式和运算符
    算数： + - * / %  从左往右  先 */ % 再 + -
        加号 ：如果两边有字符串 按字符串处理 
            1 + "a" = "la"
            1 + false = 1
            false + "a" = "falsea"
        - * % 转化成数字
            1 - "1" = 0
            1 - "A" = NAN not a number
    赋值：= 可以与算数运算符组合  -= += ...
    比较： > < == != === >= <=  结果是布尔值
        == 值一样  false == 0  true    1 == "1"
        === 值和类型都一样 false=== 0 falsea
    逻辑：&& || !  >> <<  ++ --结果是布尔值
        true || flase  -> true  一真具真
        flase  && true  ->  1 一假具假
        ++ 自增  ++a 先自增 a++ 后自增
        --  自减

四、数据类型和转换
    js -> 弱类型  var
    原始类型： 数字Number  字符串String 布尔值Boolean  undefined初始未定义 null空
    对象：Object 
    系统自带的对象 数组 函数
    自定义 {}
    数组：多个原始类型的容器
    下标 序号 0开始
    自定义： 用’.‘来取值  a={a:60 ,b:60 ,0:70} a.a  a.b a.0 

    转换 数字 字符串 布尔值： 通用b = (number)a;  string:b = a.tostring

五、流程
    if switch for while  

六、函数
    代码复用：
    function 函数名 (参数1, 参数2)  //形参
    {
        //默认值
        time = time || 7;
        函数体
        //返回值 return
    }
    函数名（time）//实参

    动态参数 : 传参传的是数组
        var  arguments 接收数组

    作用域及解析
        作用域：可访问变量的集合（函数，对象）
            定义一个变量，这个变量可以被使用的范围
        
        全局作用域 - -> 全局变量 --> 在函数外定义的变量 --> 在整个程序都可以访问到
        局部作用域--> 局部变量 --> 在函数内定义的变量 --> 函数里面可以访问
        如果定义全局变量和局部变量都有   局部变量不影响全局变量   函数访问的是局部变量

    域解析：把函数声明提前
        浏览器获得js文件 不是立刻执行代码，而是全篇变量先解析一遍

七、闭包:变量 私有化问题
    局部变量  -->  实现全局变量的生命周期
    function add ()
    {
        var cnt = 0;
         return function(){
            cnt++;
        };
    }
    var push = add();
    //函数立即执行  函数声明和函数执行放在一起
    
    var push = (function(){
        var cnt = 0;
         return function(){
            cnt++;
        };
    })();
    调用：push();
八、对象
    变量var：
    函数function ：一堆语句的集合
    对象：一堆变量+一堆函数的集合
    var obj1 = {
        x : 0, "f_f" = 0 , z:function(){}
    }
    属性： 名 ： 值
    名：string ： 隐 转化 string
    x123 -> 不加引号
    包含特殊字符 ->  加上引号

    对象属性的基本操作：
    增加  删除  修改  查询  遍历  使用点. 或 []定位属性  带特殊字符的只能用[]
    修改属性如果本身有就修改属性。如果没有就增加属性
    删除delete  一般来断绝两个对象的关系
    遍历 for (var pN in obj1){}

    引用于赋值：var存储对象的是地址  所以直接赋值好是指向同一个对象  引用    
    类： function 类名(){}

    常用类与方法：查询w3c
    

九、浏览器原理和js时间线

    web编程  浏览器
    页面： img 文字  DOM
    底层： 浏览器-> BOM

    浏览器  加载页面: 简单操作系统
    1.输入一个网址
    2.把网址转换为IP地址：服务器 -> IP   DNS服务器：

    浏览器：多线程
    1.js引擎
    2.UI渲染
    3.事件线程
    4.发起请求的线程
    5.定时器的线程

    js：单线程  编程方便
        同步任务
        异步任务

    js时间线:
    第一阶段：载入阶段 默认：同步
        1.获取页面内容1.html ->解析
        2.DOM树： html
                                head
                                mate    title script
        3.同步 1.js 下载
                js解释器  脚本解析 执行
        4.DOM树 ： html
                                head
                                mate    title script
                                body
                                。。。
        5.解析完成
        6.渲染 -> 文件下载  图片
        7.载入完成
    第二阶段：事件阶段 异步 onload

    延迟加载
    异步加载


十、BOM
    Windows 对象 -> 全局对象  全局方法
    1.弹窗 -> 浏览器的弹窗：
        同步：阻断
        alert:
        confirm:返回Boolear
        prompt:返回字符串  用户输入

    2.浏览器导航栏的信息
        Windows.location 对象
        属性 ： url的各个部分
        location.replace("") //打开新页面或刷新页面（不填）

    3.浏览器的前进与后退：
    history
    浏览器的信息：版本  厂家
    navigator
    获取浏览器的分辨率：
    screen
    4.计时器
    循环执行： var sil = setInterval(函数名，时间)
    一次执行： var sil = setTimeout(函数名，时间)
            停止：clearTimeout(sil);
    
十一、DOM  文档对象模型
    DOM树：
        html文件  ->  人 -> 页面数据
        浏览器  -> 数据结构 ->方便  查找 修改  遍历  操作

        document 节点：只有一个
        标签节点  元素节点 文本节点；
        
        查找节点三种常用方法：
            1.通过id     document.getElementById("id");   返回节点
            2.通过标签名字来查找    document.getElementBYTagName("");  返回数组
            3.通过class来查找   document.getElementBYTClassName("");    返回数组
            通过id只能document节点上使用，tag class可以任意节点开始查找

            //创建p标签
            var p = document.createElement("p");
            //创建文本节点
            var p1txt = document.createTextNode("p1");
            //添加节点
            p.appendendChild(p1txt);
            //删除节点
            div1.removeChild(p);
            p.parentNode.removeChild(p);
            //修改
                1.html 定义好的属性 对象点 获取 修改
                    class是关键字所以点classname
                    对于style可以继续用点细分确切的样式
                2.自定义属性
                    获取属性.getAttribute
                    设置属性.setAttribute
                    删除属性.removeAttribute
                3.内容
                    p.innerHTML = ""; 可以放标签
                    p.textContent = "";纯文本

十二、事件
    事件源：产生事件的地方
    事件的类型：点击
    事件对象： 记录好 信息
    事件的处理程序：函数

    注册的两种方式：
    1.html的属性：
        属性名：on+事件的名字  onclick
        属性值： 方法
                直接在html设定
                通过js的元素对象来设定
    2.通过系统提供的方法
        addEventListener(事件类型click,函数add,事件的处理方式);
    删除事件：removeEventListener();
    ie8  attecheEvent() datachEvent()

    事件函数：
        事件对象 event  提供事件的详细信息
            screenX/Y ：相对屏幕的左上角
            clientX/Y： 相对浏览器的左上角
        取消默认操作：event.preventDefault();
                                如果是on方法创建的事件可以直接return false;

    事件的传播：在默认的的情况下，点击页面的一个标签，处在传播路径的标签都会监听到对应的事件
    传播路径：DOM树从根节点到标签形成的链就是传播路径。
    事件流：接收顺序 1.从根到最终节点再2.最终节点返回根节点
        两大阶段：1.捕获阶段 2.冒泡阶段（）
        div1.addEventListener("client",div1Click,false/true)如果是true事件在捕获阶段直接，false事件在冒泡阶段执行
        冒泡事件终止：event.stopPropagation();

    事件代理：例如非常多的li，所以每个都绑定非常麻烦，所以根据冒泡原理在ul上绑定，通过event对象获取哪个被点击
    



